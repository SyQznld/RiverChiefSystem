package com.riverchiefsystem.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.appler.riverchiefsystem.dao.daoBean.AdminData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADMIN_DATA".
*/
public class AdminDataDao extends AbstractDao<AdminData, Long> {

    public static final String TABLENAME = "ADMIN_DATA";

    /**
     * Properties of entity AdminData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", true, "_id");
        public final static Property UserId = new Property(1, int.class, "userId", false, "USER_ID");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Password = new Property(4, String.class, "password", false, "PASSWORD");
        public final static Property Department = new Property(5, String.class, "department", false, "DEPARTMENT");
        public final static Property Telephone = new Property(6, String.class, "telephone", false, "TELEPHONE");
        public final static Property Role_id = new Property(7, String.class, "role_id", false, "ROLE_ID");
        public final static Property Rolename = new Property(8, String.class, "rolename", false, "ROLENAME");
    }


    public AdminDataDao(DaoConfig config) {
        super(config);
    }
    
    public AdminDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADMIN_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: Id
                "\"USER_ID\" INTEGER NOT NULL ," + // 1: userId
                "\"USERNAME\" TEXT," + // 2: username
                "\"NAME\" TEXT," + // 3: name
                "\"PASSWORD\" TEXT," + // 4: password
                "\"DEPARTMENT\" TEXT," + // 5: department
                "\"TELEPHONE\" TEXT," + // 6: telephone
                "\"ROLE_ID\" TEXT," + // 7: role_id
                "\"ROLENAME\" TEXT);"); // 8: rolename
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADMIN_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdminData entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(6, department);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(7, telephone);
        }
 
        String role_id = entity.getRole_id();
        if (role_id != null) {
            stmt.bindString(8, role_id);
        }
 
        String rolename = entity.getRolename();
        if (rolename != null) {
            stmt.bindString(9, rolename);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdminData entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
        stmt.bindLong(2, entity.getUserId());
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(5, password);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(6, department);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(7, telephone);
        }
 
        String role_id = entity.getRole_id();
        if (role_id != null) {
            stmt.bindString(8, role_id);
        }
 
        String rolename = entity.getRolename();
        if (rolename != null) {
            stmt.bindString(9, rolename);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AdminData readEntity(Cursor cursor, int offset) {
        AdminData entity = new AdminData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // password
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // department
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // telephone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // role_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // rolename
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdminData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.getInt(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPassword(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDepartment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTelephone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRole_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRolename(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AdminData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AdminData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdminData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
